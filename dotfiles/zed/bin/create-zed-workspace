#!/usr/bin/env bash

# Zed Workspace Creator
# Usage: create-zed-workspace <workspace-name> <project1> [project2] [project3] ...
# All patterns are regex and automatically anchored (^...$ added)

if [[ $# -lt 2 ]]; then
    echo "Usage: $0 <workspace-name> <project1> [project2] [project3] ..."
    echo "Examples:"
    echo "  $0 frontend my-app shared-components api-client"
    echo "  $0 actions \"action-.*\""
    echo "  $0 mixed my-app \"action-(argo|helm)-.*\" web-app-template"
    echo ""
    echo "All patterns are treated as regex and auto-anchored (^...$ added)"
    echo "Use .* for wildcard matching (e.g., \"action-.*\" not \"action-*\")"
    exit 1
fi

WORKSPACE_NAME="$1"
shift
PROJECTS=("$@")

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
NEW_SCRIPT="$SCRIPT_DIR/zed-$WORKSPACE_NAME-workspace"

if [[ -f "$NEW_SCRIPT" ]]; then
    echo "Workspace script already exists: $NEW_SCRIPT"
    echo "Delete it first if you want to recreate it."
    exit 1
fi

# Create the new workspace script
cat > "$NEW_SCRIPT" << EOF
#!/usr/bin/env bash

# Zed $WORKSPACE_NAME Workspace
# Auto-generated on $(date)

# Source common functions
SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
source "\$SCRIPT_DIR/zed-workspace-common.sh"

# Define workspace specifications
# All patterns are regex and automatically anchored (^...$ added)
WORKSPACE_SPECS=(
EOF

for project in "${PROJECTS[@]}"; do
    echo "    \"$project\"" >> "$NEW_SCRIPT"
done

cat >> "$NEW_SCRIPT" << EOF
)

# Build workspace directories and open
WORKSPACE_DIRS=(\$(build_workspace_dirs "\${WORKSPACE_SPECS[@]}"))
open_zed_workspace "$WORKSPACE_NAME" "\${WORKSPACE_DIRS[@]}"
EOF

# Make it executable
chmod +x "$NEW_SCRIPT"

echo "Created new Zed workspace: $NEW_SCRIPT"
echo "You can now run: z $WORKSPACE_NAME"
echo
echo "Workspace includes (all regex are anchored):"
for project in "${PROJECTS[@]}"; do
    echo " $project"
done
